Vagrant.configure("2") do |config|
  # Базовая Ubuntu
  config.vm.box = "ubuntu/jammy64"

  # Синхронизируем корневую папку проекта
  config.vm.synced_folder "../", "/vagrant", type: "virtualbox"

  # Приватная сеть с статическим IP
  config.vm.network "private_network", ip: "192.168.56.10"

  # Проброс порта для приложения
  config.vm.network "forwarded_port", guest: 5000, host: 5000

  # Настройки VirtualBox
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "1024"
    vb.cpus = 1
    vb.name = "devsecops2-vm"
  end

  # SSH ключ
  config.ssh.insert_key = true

  # Provision скрипт
  config.vm.provision "shell", inline: <<-SHELL
    # Обновляем пакеты
    apt-get update -y
    apt-get install -y python3 python3-pip docker.io curl jq

    # Добавляем пользователя vagrant в группу docker
    usermod -aG docker vagrant

    # Настраиваем insecure registry
    mkdir -p /etc/docker
    echo '{"insecure-registries": ["192.168.56.10:5000"]}' > /etc/docker/daemon.json
    systemctl restart docker
    chmod 666 /var/run/docker.sock

    # Устанавливаем Trivy
    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

    # Запускаем Docker-регистр (если не запущен)
    if [ -z "$(docker ps -q -f name=registry)" ]; then
      docker run -d -p 5000:5000 --restart=always --name registry registry:2
    fi

    # Собираем безопасный образ
    docker build -t 192.168.56.10:5000/my-app:latest /vagrant/app

    # Сканируем образ на уязвимости
    trivy image --exit-code 1 --severity CRITICAL,HIGH 192.168.56.10:5000/my-app:latest || true

    # Push в локальный регистр
    docker push 192.168.56.10:5000/my-app:latest

    # Развёртывание приложения из локального регистра
    if [ -n "$(docker ps -q -f name=my-app)" ]; then
      docker rm -f my-app
    fi
    docker run -d -p 5000:5000 --name my-app 192.168.56.10:5000/my-app:latest
  SHELL
end
